const express = require("express");
const db = require("./db"); 
const app = express();
const path = require("path");
const PORT = process.env.PORT || 3000;

app.use(express.json());

// serve frontend files from public folder
app.use(express.static(path.join(__dirname, "public")));


// convert a single row into a JS object
function rowToObject(row) {
    return {
        id: row.id,
        name: row.name,
        abbreviation: row.abbreviation,
        difficulty: row.difficulty,
        steps: JSON.parse(row.steps) //turn string back to array
    };
}


// home base
//app.get("/", (req, res) => {
    //res.send("Crochet Stitch API");
//});

//getting every stitch
app.get("/api/stitches", (req, res) => {
    const rows = db.prepare("SELECT * FROM stitches").all(); //selects every row in stitch table
    const stitches = rows.map(rowToObject); //convert each row to object
    res.json(stitches); //send as json
});

//one stitch by id
app.get("/api/stitches/:id", (req, res) => {
    const row = db.prepare("SELECT * FROM stitches WHERE id = ?").get(req.params.id); //gets row by id number
    if (!row) {
        return res.status(404).json({ error: "Stitch not found" });
    } //404 error if id is not found 
    res.json(rowToObject(row)); //convert row to object and send as json
});

//add a single stitch
app.post("/api/stitches", (req, res) => {
    const { name, abbreviation, difficulty, steps } = req.body; //destructure req.body
    if (!name || !abbreviation || !difficulty || !steps) {
        return res.status(400).json({ error: "Missing required fields" });
    } //400 error if required fields are missing
    const stmt = db.prepare(`
        INSERT INTO stitches (name, abbreviation, difficulty, steps)
        VALUES (?, ?, ?, ?)
    `);
    const info = stmt.run(name, abbreviation, difficulty, JSON.stringify(steps)); //adds new row to database/ steps into array
    const newStitch = db.prepare("SELECT * FROM stitches WHERE id = ?").get(info.lastInsertRowid); //autogenerated id and get new row
    res.status(201).json(rowToObject(newStitch)); //201 status code for created
});

//update a stitch by id in case of mistake
app.put("/api/stitches/:id", (req, res) => {
    const { name, abbreviation, difficulty, steps } = req.body; //destructure req.body
    if (!name || !abbreviation || !difficulty || !steps) {
        return res.status(400).json({ error: "Missing required fields" });
    } //400 error if required fields are missing
    
    //update placeholder
    const stmt = db.prepare(` 
        UPDATE stitches
        SET name=?, abbreviation=?, difficulty=?, steps=?
        WHERE id=?
    `);
    //run update
    const info = stmt.run(name, abbreviation, difficulty, JSON.stringify(steps), req.params.id); //update row by id
    
    if (info.changes === 0) {
        return res.status(404).json({ error: "Stitch not found" });
    } //404 error if id is not found

    const updatedStitch = db.prepare("SELECT * FROM stitches WHERE id = ?").get(req.params.id); //get updated row
    res.json(rowToObject(updatedStitch)); //send updated row as json
});

//delete a stitch by id just in case
app.delete("/api/stitches/:id", (req, res) => {
    const stmt = db.prepare("DELETE FROM stitches WHERE id = ?"); //delete placeholder for id given
    const info = stmt.run(req.params.id); //run delete by id

    if (info.changes === 0) {
        return res.status(404).json({ error: "Stitch not found" });
    } //404 error if id is not found

    res.status(204).end(); //204 status code for no content
});

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`); //running confirmation message
});

